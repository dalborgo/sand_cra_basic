//alternativo senza covered
CREATE INDEX adv_date_type_archived ON `astenpos`(`date`) WHERE `type` = 'PAYMENT' AND `archived` = true
// alternativo senza covered
CREATE INDEX adv_archived_date_type ON `astenpos`(`archived`,`date`) WHERE (`type` = 'PAYMENT')

//browser * //forse meglio quella sotto
CREATE INDEX `adv_type_meta_self_cas` ON `astenpos`(`type`,(meta(self).`cas`))
// covered *
CREATE INDEX adv_covered_closed_tables ON `astenpos`(`archived`,`date`,`mode`,`final_price`,`room_display`,`order`,`discount_price`,`income`,`closed_by`,`table_display`,`covers`,`owner`,`number`) WHERE (`type` = 'PAYMENT')

//per singoli doc non fondamentali ma consigliati
CREATE INDEX adv_archived_order_owner_type ON `astenpos`(`archived`,`order`,`owner`) WHERE `type` = 'PAYMENT'
CREATE INDEX `adv_owner_type` ON `astenpos`(`owner`) WHERE (`type` = "ORDER")

//quelli 2 sopra sostituiti da questo importante *
CREATE INDEX `adv_owner_type` ON `astenpos`(`owner`,`type`)
// covered per installations *
CREATE INDEX adv_covered_installation ON `astenpos`(`type`,object_remove(self, 'type'))

//covered per browser con ricerca type LIKE (da testare se migliore di quello in alto) (copre bene anche il count)
CREATE INDEX `adv_covered_browser_type_search` ON `astenpos`(`owner`,`type`,lower((meta(self).`id`)),(meta(self).`cas`))
CREATE INDEX `adv_covered_browser_type_search` ON `astenpos`(`owner`,`type`,lower((meta(self).`id`)),meta(self).`cas` DESC)

// alternativo browser (aggiunge campo per identificare il channel)
CREATE INDEX `adv_covered_browser_type_search` ON `astenpos`(`owner`,`type`,lower((meta(self).`id`)),meta(self).`cas` DESC,to_boolean((`date_closing`)))

SELECT MAX(buc.date) date,
       SUM(buc.covers) covers,
       SUM(buc.final_price) final_price,
       SUM(buc.discount_price) discount_price,
       ARRAY_AGG(buc.table_display)[0] table_display,
       ARRAY_AGG(buc.room_display)[0] room_display,
       ARRAY_AGG(buc.closed_by)[0] closed_by,
       ARRAY_AGG(buc.income)[0] income,
       ARRAY_AGG(buc.mode) mode
FROM astenpos buc
WHERE buc.type='PAYMENT'
    AND buc.archived = TRUE
    AND buc.date BETWEEN '20190515181021917' AND '20201221110944845'
GROUP BY buc.`order`
ORDER BY date DESC

SELECT MAX(buc.date) date,
       SUM(buc.covers) covers,
       SUM(buc.final_price) final_price,
       SUM(buc.discount_price) discount_price,
       ARRAY_AGG(buc.table_display)[0] table_display,
       ARRAY_AGG(buc.room_display)[0] room_display,
       ARRAY_AGG(`user`.`user`)[0] closed_by,
       ARRAY_AGG(buc.owner)[0] owner,
       CASE WHEN COUNT(buc.mode) > 1 THEN ARRAY_AGG({"final_price": buc.final_price, "mode": buc.mode, "_id": META(buc).id, "date": buc.date, "covers": buc.covers, "income": income.display, "closed_by": `user`.`user`}) ELSE ARRAY_AGG({"mode": buc.mode, "_id": META(buc).id, "income": income.display})[0] END mode
FROM astenpos buc LEFT
    JOIN astenpos AS `user` ON KEYS buc.closed_by LEFT
    JOIN astenpos AS income ON KEYS "PAYMENT_INCOME_" || buc.income
WHERE buc.type='PAYMENT'
    AND buc.archived = TRUE
    AND buc.date BETWEEN '20190515181021917' AND '20201221110944845'
GROUP BY buc.`order`
ORDER BY date DESC



	function(doc, meta) {
		var sync;
		var isXattr;

		//Skip any internal sync documents
		if (meta.id.substring(0, 6) == "_sync:") {
			return;
		}

		//Get sync data from xattrs or from the doc body
		if (meta.xattrs === undefined || meta.xattrs._sync === undefined) {
			sync = doc._sync;
			isXattr = false;
		} else {
			sync = meta.xattrs._sync;
			isXattr = true;
		}

		//Skip if the document has been deleted or has no sync data defined
		if (sync === undefined || (sync.flags & 1) || sync.deleted)
			return;

		//If sync data is in body strip it from the view result
		if (!isXattr) {
			delete doc._sync;
		}

		//Update channels
		var channels = [];
		var channelMap = sync.channels;
		if (channelMap) {
			for (var name in channelMap) {
				removed = channelMap[name];
				if (!removed)
					channels.push(name);
			}
		}
		meta.channels = channels;

		//Add rev to meta
		meta.rev = sync.rev;

		//Run view
		var _emit = emit;
		(function() {
			var emit = function(key, value) {
				_emit(key, [channels, value]);
			};
			(function (doc, meta) {
        if (doc.type && doc.owner) {
          emit(doc.owner+'|'+(9999999999999 - (new Date(sync.time_saved).getTime())), null);
        }
      })(doc, meta);
		}());

		//Re-add sync data to body
		if (!isXattr) {
			doc._sync = sync;
		}
	}